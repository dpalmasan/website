---
layout: post
title:  "PrimerPost ¬°Salud üç∫!"
date:   2022-04-25 19:22:03 -0400
categories: python algorithms
---
En este primer post me gustar√≠a introducir un poco de qu√© tratar√° el Blog. Como dice la descripci√≥n se tratar√° de un blog en el cual compartir√© conocimiento t√©cnico en diferentes √°reas de software en las que me ha tocado trabajar. He tenido la fortuna de trabajar en varios roles en la industria, todos ellos relacionados a la tecnolog√≠a:

* `QA Engineer`
* `Data Scientist`
* `Data Engineer`
* `Backend Engineer`
* `Full Stack Engineer`

Tambi√©n he trabajado en proyectos de investigaci√≥n y desarrollo con la Universidad de Concepci√≥n, entre los cuales destaco [TRUNAJOD](https://github.com/dpalmasan/TRUNAJOD2.0) que es una biblioteca para an√°lisis de complejidad textual y ha sido utilizada en diversas investigaciones relacionadas con comprensi√≥n lectora y relaci√≥n lectura-escritura en el aprendizaje.

Para no perder el prop√≥sito del foro, en este primer post dejo un peque√±o problema a resolver, digamos en `python` (aunque el lenguaje debiese ser irrelevante). El problema es el que sigue: _Invierta la representaci√≥n de bits de un n√∫mero `n` dado._. Ejemplos:

Si la entrada es `n = 43261596 (00000010100101000001111010011100)`, la salida debiese ser `964176192 (00111001011110000010100101000000)`. Un caso un poco m√°s simple de seguir, si la entrada es (en binario) `11111111111111111111111111111101`, la salida debiese ser `10111111111111111111111111111111`. Para que quede claro, la llamada `invertir_bits(43261596)` debiese retornar `964176192`.

Una posible soluci√≥n es el siguiente algoritmo:

1. Inicializar `delta = 31` (32 bits)
2. Tomar el d√≠gito menos significativo (LSB)
3. Desplazar dicho d√≠gito en delta
4. Actualizar delta con `delta <- delta - 1`
5. Dividir `n` en 2 (desplazar un bit a la derecha)
6. Repetir 2 hasta que `n` sea `0`

Una implementaci√≥n tentativa en `python`:

{% highlight python %}
def invertir_bits(n: int) -> int:
    result = 0
    delta = 31
    while n:
        result |= ((n & 1) << delta)
        delta -= 1
        n >>= 1
    return result
{% endhighlight %}

Con esto termina mi primer post, espero que haya sido de su agrado.