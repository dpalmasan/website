---
layout: post
title:  "Tips para Entrevistas TI y un poco de \"System Design\""
date:   2022-07-04 16:03:03 -0400
categories: entrevistas ti
---
*Aclaraci√≥n*: Me disculpo de antemano si abuso de los anglicismos (no me gustan), pero lamentablemente es un vocabulario com√∫n en redes profesionales üòî.

*Obs*: Si quieres ir al problema de c√≥digo del d√≠a, [click aqu√≠](#code-challenge).

No es sopresa que en estos tiempos muchas empresas han optado por estrategias conservadoras, debido a diferentes eventos que han afectado el mercado a nivel mundial. Ello tambi√©n ha impactado en el mundo tecnol√≥gico y entre las consecuencias de estas estrategias se encuentra el _hiring freeze_ (paulatinamente pausar las contrataciones). Esta incertidumbre hace que un proceso que de por s√≠ es estresante (buscar trabajo, proceso de entrevistas), cause m√°s ansiedad de lo normal. Es sabido en el mundo TI, en especial en roles ligados al desarrollo (ej. _software engineer_, _machine learning engineer_) el proceso de entrevistas es estresante, causa ansiedad, y a veces llega a ser complicado. Existe un debate constante en redes profesionales (como _LinkedIn_) sobre c√≥mo debiese ser el proceso de entrevistas para desarrolladores, algunos se quejan de los _code challenges_ en vivo, otros se quejan de las tareas (_homework assignment_), otros se quejan de las entrevistas no t√©cnicas, en fin, quejas hay para todo. Las √∫nicas verdades, en mi opini√≥n:

* A nadie lo van a contratar por ser `X` o por tener un curr√≠culum bien pulido (a veces exagerado) (excepci√≥n: ha hecho algo muy relevante en la industria)
* Nadie tiene garantizado un puesto, o el "√©xito" (por eso hay que ser agradecido e intentar ayudar siempre; dejar el ego a un lado)

Volviendo al tema de las entrevistas, en general creo que los procesos de selecci√≥n que m√°s ansiedad producen, son los que involucran demostrar conocimiento t√©cnico "en vivo". En general, los _homework assignments_ son simples por los plazos y porque uno puede googlear. Un ejemplo anecd√≥tico, una vez hice una prueba de `ReactJs` sin saber nada del framework, pero entre la documentaci√≥n y googleando saqu√© el puntaje m√°ximo (era de estas pruebas tipo hackerrank). Otras veces estas tareas, las usan malintencionadamente para que les hagas trabajo gratis, me ha pasado y se nota demasiado; esto en general ocurre en roles de dise√±o, y _data science_, me imagino que por la naturaleza de los entregables. Los procesos de entrevistas que involucran pruebas "en vivo" generalmente tienen las siguientes componentes:

* Rondas de _code challenges_, para probar la capacidad de la persona a la hora de resolver problemas.
* Rondas de _system design_, para medir el _seniority_ del postulante.

Si bien este proceso tiene ciertos vicios, en la pr√°ctica se da que minimiza los falsos positivos (pudiendo obtener falsos negativos). Desde el punto de vista de la empresa, y por lo que he le√≠do en blogs, imagino que la raz√≥n principal de ello es que contratar es caro. En mi experiencia este proceso es divertido, excepto raras veces en que salen con un problema de programaci√≥n din√°mica (tipo _hard_ de leetcode) y esperan que lo resuelvas en 20 minutos. Pero fuera de esos casos raros, el proceso es divertido, pero causa ansiedad. Si soy honesto, resolver problemas de c√≥digo no es complicado, ya que en general en estas entrevistas preguntan problemas de dificultad media (a veces f√°cil, y rara vez dif√≠ciles). En general se busca evaluar la capacidad anal√≠tica del postulante (generalmente es libre de escoger el lenguaje de programaci√≥n que guste), y tambi√©n conocimiento b√°sico de algoritmos y estructuras de datos (ordenamiento, grafos, _heaps_, √°rboles binarios, _arrays_, testing, capacidad de plantear una soluci√≥n y luego implementarla). Como al final de cada entrada pondr√© alg√∫n ejercicio de este tipo, en esta oportunidad me enfocare en las entrevistas que s√≠ me asustan: _System Design_. En este tipo de entrevistas, el problema en general es ambig√ºo, no existe una soluci√≥n clara, y el postulante es el que debe hacer supuesto, aclarar requerimientos, hacer c√°lculos (latencia, consultas por segundo, memoria, escalabilidad, uso de red, etc.).

En esta entrada de blog, dise√±aremos el clich√© de los sistemas, un acortador de `URLs` (tipo _tinyurl_).

## Acortador de URLs ##

Cuando te encuentras en una entrevista de dise√±o de sistemas, el enunciado probablemente sea algo como: _Dise√±e un acortador de urls_. Como se puede notar, el enunciado es bastante ambig√ºo e incompleto, y empezar a dise√±ar "a la mala" es un mal indicio para el entrevistador. Algunas preguntas que se pueden hacer:

* ¬øDe qu√© largo tienen que ser las URLs sin considerar el dominio? ¬øEs 7 caract√©res adecuado?
* ¬øEs necesario que un usuario se registre para usar el sistema?
* ¬øCu√°l es la carga esperada de usuarios?
* ¬øCu√°l es el largo m√°ximo esperado para una URL?

Dependiendo de las aclaraciones que haga el entrevistador, se debe tomar nota de los requerimientos y hacer estimaciones, como cantidad de consultas por segundo, espacio en disco requerido, tolerancia a fallas, entre otras cosas. Supongamos que iterando con el entrevistador obtuvimos las siguientes respuestas:

* El largo de 7 caract√©res es adecuado
* Se esperan urls de hasta 500 caract√©res
* Promedio de `10000` consultas al d√≠a
* Prototipo inicial vivir√° 1 a√±o
* Por el momento no preocuparse de la tolerancia a fallas

Con ello se puede hacer una estimaci√≥n:

* Largo de URL `500 B`
* Largo del hash `7 B`
* Cantidad de consultas diarias `10000`
* No se requiere registro de usuarios

Por lo tanto el espacio requerido diario `507 B * 10000` ser√≠a aproximadamente `5 MB` y considerando 1 a√±o `~2GB`. Para soportar este caso de uso, se puede utilizar cualquier motor de base de datos (relacional o no relacional), como de momento la tolerancia a fallas no es un impedimento, se puede dejar, pero valdr√≠a la pena mencionar que se pueden utilizar r√©plicas de la base de datos para tolerancia a falla. Pero para este caso se considerar√° un servidor, y se puede comentar que luego del dise√±o inicial se propondr√°n ideas para escalar el sistema.

El flujo del sistema se muestra en la figura 1. B√°sicamente, se hace una petici√≥n a la URL acortada, y el sistema redirecciona a la URL original. Un posible dise√±o de este sistema se muestra en la figura 2, en esencia se requieren los siguientes componentes:

* Un server que permita crear URLs acortadas y tambi√©n redireccionar a las URLs originales
* Una base de datos para almacenar el mapeo de las URLs acortadas a las originales
* Un cach√© para evitar hacer m√∫ltiples llamadas innecesarias a la BBDD.

<div align="center">

![Funcionamiento Acortador de URLs](https://gist.githubusercontent.com/dpalmasan/103d61ae06cfd3e7dee7888b391c1792/raw/99e6ae0ed96337ad83354e04bdb87b2e309837b8/url-shortener.png)

_Fig 1: Funcionamiento del acortador de URLs._

![Dise√±o en Alto Nivel del Acortador de URLs](https://gist.githubusercontent.com/dpalmasan/103d61ae06cfd3e7dee7888b391c1792/raw/99e6ae0ed96337ad83354e04bdb87b2e309837b8/url-shortener-hl.png)

_Fig 2: Dise√±o en alto nivel del acortador de URLs._

</div>

El modelo de datos puede ser el siguiente:

| Col         | Type     |
|-------------|----------|
| url_id      | `int64`  |
| url         | `string` |
| shorten_url | `string` |



{% highlight golang %}
var codes = [...]string{
	"0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
	"a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
	"k", "l", "m", "n", "o", "p", "q", "r", "s", "t",
	"u", "v", "w", "x", "y", "z", "A", "B", "C", "D",
	"E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
	"O", "P", "Q", "R", "S", "T", "U", "V", "W", "X",
	"Y", "Z"}

func Base62(number int64) string {
	result := ""
	for number > 0 {
		result = codes[number%62] + result
		number /= 62
	}
	return result
}
{% endhighlight %}

## Code Challenge ##
