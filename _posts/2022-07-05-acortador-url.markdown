---
layout: post
title:  "Tips para Entrevistas TI y un poco de \"System Design\" üíª"
date:   2022-07-04 16:03:03 -0400
categories: entrevistas ti
---
*Aclaraci√≥n*: Me disculpo de antemano si abuso de los anglicismos (no me gustan), pero lamentablemente es un vocabulario com√∫n en redes profesionales üòî.

*Obs*: Si quieres ir al problema de c√≥digo del d√≠a, [click aqu√≠](#code-challenge).

No es sopresa que en estos tiempos muchas empresas han optado por estrategias conservadoras, debido a diferentes eventos que han afectado el mercado a nivel mundial. Ello tambi√©n ha impactado en el mundo tecnol√≥gico y entre las consecuencias de estas estrategias se encuentra el _hiring freeze_ (paulatinamente pausar las contrataciones). Esta incertidumbre hace que un proceso que de por s√≠ es estresante (buscar trabajo, proceso de entrevistas), cause m√°s ansiedad de lo normal. Es sabido en el mundo TI, en especial en roles ligados al desarrollo (ej. _software engineer_, _machine learning engineer_) el proceso de entrevistas es estresante, causa ansiedad, y a veces llega a ser complicado. Existe un debate constante en redes profesionales (como _LinkedIn_) sobre c√≥mo debiese ser el proceso de entrevistas para desarrolladores, algunos se quejan de los _code challenges_ en vivo, otros se quejan de las tareas (_homework assignments_), otros se quejan de las entrevistas no t√©cnicas, en fin, quejas hay para todo. Las √∫nicas verdades, en mi opini√≥n:

* A nadie lo van a contratar por ser `X` o por tener un curr√≠culum bien pulido (a veces exagerado) (excepci√≥n: ha hecho algo muy relevante en la industria)
* Nadie tiene garantizado un puesto, o el "√©xito" (por eso hay que ser agradecido e intentar ayudar siempre; dejar el ego a un lado)

Volviendo al tema de las entrevistas, en general creo que los procesos de selecci√≥n que m√°s ansiedad producen, son los que involucran demostrar conocimiento t√©cnico "en vivo". En general, los _homework assignments_ son simples por los plazos y porque uno puede googlear. Un ejemplo anecd√≥tico, una vez hice una prueba de `ReactJs` sin saber nada del framework, pero entre la documentaci√≥n y googleando saqu√© el puntaje m√°ximo (era de estas pruebas tipo hackerrank). Otras veces estas tareas, las usan malintencionadamente para que les hagas trabajo gratis, me ha pasado y se nota demasiado; esto en general ocurre en roles de dise√±o, y _data science_, me imagino que por la naturaleza de los entregables. Los procesos de entrevistas que involucran pruebas "en vivo" generalmente tienen las siguientes componentes:

* Rondas de _code challenges_, para probar la capacidad de la persona a la hora de resolver problemas.
* Rondas de _system design_, para medir el _seniority_ del postulante.

Si bien este proceso tiene ciertos vicios, en la pr√°ctica se da que minimiza los falsos positivos (pudiendo obtener falsos negativos). Desde el punto de vista de la empresa, y por lo que he le√≠do en blogs, imagino que la raz√≥n principal de ello es que contratar es caro. En mi experiencia este proceso es divertido, excepto raras veces en que salen con un problema de programaci√≥n din√°mica (tipo _hard_ de leetcode) y esperan que lo resuelvas en 20 minutos. Pero fuera de esos casos raros, el proceso es divertido, pero causa ansiedad. Si soy honesto, resolver problemas de c√≥digo no es complicado, ya que en general en estas entrevistas preguntan problemas de dificultad media (a veces f√°cil, y rara vez dif√≠ciles). En general se busca evaluar la capacidad anal√≠tica del postulante (generalmente es libre de escoger el lenguaje de programaci√≥n que guste), y tambi√©n conocimiento b√°sico de algoritmos y estructuras de datos (ordenamiento, grafos, _heaps_, √°rboles binarios, _arrays_, testing, capacidad de plantear una soluci√≥n y luego implementarla). Como al final de cada entrada pondr√© alg√∫n ejercicio de este tipo, en esta oportunidad me enfocare en las entrevistas que s√≠ me asustan: _System Design_. En este tipo de entrevistas, el problema en general es ambig√ºo, no existe una soluci√≥n clara, y el postulante es el que debe hacer supuesto, aclarar requerimientos, hacer c√°lculos (latencia, consultas por segundo, memoria, escalabilidad, uso de red, etc.).

En esta entrada de blog, dise√±aremos el clich√© de los sistemas, un acortador de `URLs` (tipo _tinyurl_).

## Acortador de URLs ##

Cuando te encuentras en una entrevista de dise√±o de sistemas, el enunciado probablemente sea algo como: _Dise√±e un acortador de urls_. Como se puede notar, el enunciado es bastante ambig√ºo e incompleto, y empezar a dise√±ar "a la mala" es un mal indicio para el entrevistador. Algunas preguntas que se pueden hacer:

* ¬øDe qu√© largo tienen que ser las URLs sin considerar el dominio?
* ¬øEs necesario que un usuario se registre para usar el sistema?
* ¬øCu√°ntas URLs se espera que se generen diariamente?
* ¬øCu√°l es el largo m√°ximo esperado para una URL?

Dependiendo de las aclaraciones que haga el entrevistador, se debe tomar nota de los requerimientos y hacer estimaciones, como cantidad de consultas por segundo, espacio en disco requerido, tolerancia a fallas, entre otras cosas. Supongamos que iterando con el entrevistador obtuvimos las siguientes respuestas:

* Se esperan urls de en promedio `100` caract√©res
* Promedio de `10000` URLs al d√≠a
* Prototipo inicial vivir√° 1 a√±o
* Por el momento no preocuparse de la tolerancia a fallas

Con ello se puede hacer una estimaci√≥n:

* Largo de URL `100 B`
* Cantidad de consultas diarias `10000`
* No se requiere registro de usuarios

Por lo tanto el espacio requerido diario `100 Bytes * 10000` ser√≠a aproximadamente `1 MB` y considerando 1 a√±o `~365MB`. Para soportar este caso de uso, se puede utilizar cualquier motor de base de datos (relacional o no relacional), como de momento la tolerancia a fallas no es un impedimento, se puede dejar, pero valdr√≠a la pena mencionar que se pueden utilizar r√©plicas de la base de datos para tolerancia a falla. Pero para este caso se considerar√° un servidor, y se puede comentar que luego del dise√±o inicial se propondr√°n ideas para escalar el sistema.

El flujo del sistema se muestra en la figura 1. B√°sicamente, se hace una petici√≥n a la URL acortada, y el sistema redirecciona a la URL original. Un posible dise√±o de este sistema se muestra en la figura 2, en esencia se requieren los siguientes componentes:

* Un server que permita crear URLs acortadas y tambi√©n redireccionar a las URLs originales
* Una base de datos para almacenar el mapeo de las URLs acortadas a las originales
* Un cach√© para evitar hacer m√∫ltiples llamadas innecesarias a la BBDD.

<div align="center">

![Funcionamiento Acortador de URLs](https://gist.githubusercontent.com/dpalmasan/103d61ae06cfd3e7dee7888b391c1792/raw/99e6ae0ed96337ad83354e04bdb87b2e309837b8/url-shortener.png)

_Fig 1: Funcionamiento del acortador de URLs._

![Dise√±o en Alto Nivel del Acortador de URLs](https://gist.githubusercontent.com/dpalmasan/103d61ae06cfd3e7dee7888b391c1792/raw/99e6ae0ed96337ad83354e04bdb87b2e309837b8/url-shortener-hl.png)

_Fig 2: Dise√±o en alto nivel del acortador de URLs._

</div>

Por lo tanto, se podr√≠a dise√±ar una API con dos _endpoints_:

* `POST /shortener` que recibe una URL y la transforma en una URL acortada
* `GET /<URL_ID>` que a partir de la URL acortada, retorna la URL original

Para transformar la url, se puede utilizar una funci√≥n _hash_, como se muestra en la figura 3. Esta funci√≥n retornar√° un valor que se utilizar√° para mapear hacia la URL original.

<div align="center">

![Hash](https://gist.githubusercontent.com/dpalmasan/103d61ae06cfd3e7dee7888b391c1792/raw/ab212faf039dac2e65559066f2019b08259fbf79/hash.png)

_Fig 3: Funci√≥n hash._

</div>

### Modelo de datos ###

El modelo de datos puede ser el siguiente:

| Col           | Type     |
|---------------|----------|
| `url_id`      | `int64`  |
| `url`         | `string` |
| `shorten_url` | `string` |

Si queremos que los valores de la funci√≥n hash sean valores alfanum√©ricos (`[0-9A-Za-z]`), entonces tenemos 62 s√≠mbolos para escoger. El largo del `string` resultante del hash, dar√° la cantidad de URL diferentes que se pueden tener. Por ejemplo, si consideramos _hashes_ de largo 3, entonces: 

`# Posibles URLs = 62^3 = 238328`.

El largo debe considerarse, si a futuro se quiere escalar el sistema a millones o billones de URLs.

Se pueden explorar dos posibles alternativas:

1. Utilizar una funci√≥n hash existente (`CRC32`, `MD5`, `SHA-1`)
2. Generar un `Id` √∫nico para cada `URL`

En la primera alternativa, para reducir el largo del hash (idea de acortar URLs), habr√≠a que truncar el valor resultante al aplicarlo a la `URL` original. Por otro lado, existe el riesgo de tener colisiones (`f(x1) = f(x2)` para alg√∫n `x1 != x2`), por lo que habr√≠a que implementar un m√©todo que permita lidiar con colisiones. Hacer que esto sea eficiente es un desaf√≠o complejo, pero es una alternativa v√°lida. Por otro lado, podr√≠a utilizarse un `Id` √∫nico y transformarlo a base 62. Esto tiene la desventaja que los hashes no ser√°n de largo fijo, y por otro lado dependen de c√≥mo se genere el `Id` (es un poco complejo para el caso distribuido). Sin embargo, para el prototipo, podemos usar de `Id` el `timestamp` en el que la `url` es creada y realizar la transformaci√≥n. El siguiente c√≥digo en `golang` transforma un entero de base 10 a base 62:

{% highlight golang %}
var codes = [...]string{
	"0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
	"a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
	"k", "l", "m", "n", "o", "p", "q", "r", "s", "t",
	"u", "v", "w", "x", "y", "z", "A", "B", "C", "D",
	"E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
	"O", "P", "Q", "R", "S", "T", "U", "V", "W", "X",
	"Y", "Z"}

func Base62(number int64) string {
	result := ""
	for number > 0 {
		result = codes[number%62] + result
		number /= 62
	}
	return result
}
{% endhighlight %}

Por ejemplo si la `url` fue creada con un timestamp `1657000477`, entonces el _hash_ ser√≠a `1O8Bw9`.

### Implementaci√≥n ###

Implement√© este sistema con el siguiente stack:

* `MySQL`
* `Golang`
* `Redis`

<div align="center">

![Create Hash](https://gist.githubusercontent.com/dpalmasan/103d61ae06cfd3e7dee7888b391c1792/raw/cafe2106f31be18c521789d7d7adc764fa2e73d1/postman.png)

_Fig 4: Creando hash para url._

![Demo](https://gist.githubusercontent.com/dpalmasan/103d61ae06cfd3e7dee7888b391c1792/raw/cafe2106f31be18c521789d7d7adc764fa2e73d1/demo-url.gif)

_Fig 5: Demo acortador de url redireccionando._

</div>

Dejo un [enlace al projecto en github](https://github.com/dpalmasan/url-shortener).

## Code Challenge ##

Escriba una funci√≥n con la siguiente firma `bool oneEditApart(string s1, string s2)`. La funci√≥n debe retornar `true` si con una sola *edici√≥n* el string `s1/s2` puede ser transformado a `s2/s1`. Una edici√≥n consiste en:

* Insertar un caracter en cualquier posici√≥n del `string`
* Eliminar un caracter
* Reemplazar un caracter

Ejemplos:

```
OneEditApart("cat", "dog") = false
OneEditApart("cat", "cats") = true
OneEditApart("cat", "cut") = true
OneEditApart("cat", "cast") = true
OneEditApart("cat", "at") = true
OneEditApart("cat", "act") = false
```

<details><summary>Ver Soluci√≥n</summary>
<p>

La primera observaci√≥n que hay que tener en este problema, es que si el largo de los strings difiere en 2 o m√°s, significa que se necesita m√°s de una edici√≥n para convertir `s1` en `s2`, por lo tanto para este caso siempre deber√≠amos retornar `false`. Por ejemplo si consideramos los strings `"c"` y `"cat"`, necesitamos o insertar dos caracteres en `"c"` o eliminar dos caracteres en `"cat"`. Esta regla nos da una idea de c√≥mo podemos abordar el problema, debido a la simetr√≠a de las operaciones.

Primero debemos chequear si `|s1 - s2| <= 1`, en caso contrario siempre retornamos `false`. Luego, podemos definir `s1'` y `s2'`, tal que `s1'.length >= s2'.length`. En esta definici√≥n tenemos un caso de borde extra, por ejemplo si `s1'` o `s2'` son de largo 1, significa que siempre van a estar a una distancia de edici√≥n o menos. Por lo tanto retornamos `true`.

Finalmente, debemos considerar los siguientes 3 casos para `s1'` y `s2'`:

* `"cat"` y `"at"`
* `"cat"` y `"ca"`
* `"cat"` y `"cut"`

Para el primer caso, chequeamos el primer caracter y lo "ignoramos" si es diferente. Luego, iteramos sobre `s2'` y contamos las diferencias. Si hay m√°s de dos diferencias, significa que los strings no est√°n a una distancia de edici√≥n igual 1 y por lo tanto retornamos `false`, en caso contrario, retornamos `true`. Se llega al siguiente algoritmo:

```
algoritmo one_edit_apart:
  entrada: s1, s2
  salida: true si s1 y s2 est√°n a una distancia de edici√≥n igual a 1, false en caso contrario

  len_diff = |s1.length - s2.length|

    if len_diff > 1:
        return false

    if s1.length > s2.length:
        s1' = s1
        s2' = s2
    else:
        s1' = s2
        s2' = s1

    if s1'.length == 1:
        return True

    diffs = 0

    # Caso de borde
    s1_idx = 1 if s1p[0] != s2p[0] else 0
    for s2_idx = 0 to s2'.length - 1
        if s1_idx < s1'.length and s2'[s2_idx] != s1'[s1_idx]:
            if diffs < 1 and len_diff > 0:
                s1_idx += 1
            diffs += 1
        s1_idx += 1
    return diffs <= 1
```

### Implementaci√≥n tentativa en python

{% highlight python %}

def one_edit_apart(s1: str, s2: str) -> bool:
    """Check if two strings are one edit apart.
    The possible operations to consider are:
    - Insert
    - Replace
    - Remove
    If using one of these operations we can convert string ``s1`` in string
    ``s2`` then the function returns True, otherwise it will return False.

    :param s1: Input string 1
    :type s1: str
    :param s2: Input string 2
    :type s2: str
    :return: True if strings are one edit apart, False otherwise
    :rtype: bool
    """
    len_diff = abs(len(s1) - len(s2))

    # To be one edit apart this is required
    if len_diff > 1:
        return False

    # Making s1' as the largest string
    if len(s1) > len(s2):
        s1p = s1
        s2p = s2
    else:
        s1p = s2
        s2p = s1

    # Base case, if s1' is one char then we now distance is 1
    if len(s1p) == 1:
        return True

    diffs = 0

    # For corner cases like "cat" "at", we check the first character.
    s1_idx = 1 if s1p[0] != s2p[0] else 0
    for s2_idx, c in enumerate(s2p):
        if s1_idx < len(s1p) and c != s1p[s1_idx]:
            # This is for corner cases like "cat" "ca"
            if diffs < 1 and len_diff > 0:
                s1_idx += 1
            diffs += 1
        s1_idx += 1

    # If we found less or 1 difference, then strings are one edit apart
    return diffs <= 1

{% endhighlight %}

</p>
</details>